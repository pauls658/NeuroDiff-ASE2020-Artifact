import subprocess
from _collections import OrderedDict

ACASProps = OrderedDict([
    (1 , (0, [0.679857730865478515625000000000, 0.499999880790710449218750000000, 0.499999880790710449218750000000, 0.500000000000000000000000000000, -0.449999988079071044921875000000, ],
[0.600000023841857910156250000000, -0.499999880790710449218750000000, -0.499999880790710449218750000000, 0.449999988079071044921875000000, -0.500000000000000000000000000000, ])),
    (3 , (0, [-0.298552811145782470703125000000, 0.009549296461045742034912109375, 0.499999880790710449218750000000, 0.500000000000000000000000000000, 0.500000000000000000000000000000, ],
[-0.303531169891357421875000000000, -0.009549296461045742034912109375, 0.493380308151245117187500000000, 0.300000011920928955078125000000, 0.300000011920928955078125000000, ])),
    (4 , (0, [-0.298552811145782470703125000000, 0.009549296461045742034912109375, 0.000000000000000000000000000000, 0.500000000000000000000000000000, 0.166666671633720397949218750000, ],
[-0.303531169891357421875000000000, -0.009549296461045742034912109375, 0.000000000000000000000000000000, 0.318181812763214111328125000000, 0.083333335816860198974609375000, ])),
    (5 , (4, [-0.321785092353820800781250000000, 0.063661977648735046386718750000, -0.499204218387603759765625000000, -0.227272734045982360839843750000, -0.166666671633720397949218750000, ],
[-0.324274271726608276367187500000, 0.031830988824367523193359375000, -0.499999970197677612304687500000, -0.500000000000000000000000000000, -0.500000000000000000000000000000, ])),
    (16 , (0, [0.679857730865478515625000000000, -0.111408457159996032714843750000, -0.499204099178314208984375000000, -0.409090906381607055664062500000, 0.500000000000000000000000000000, ],
[-0.129289120435714721679687500000, -0.499999880790710449218750000000, -0.499999880790710449218750000000, -0.500000000000000000000000000000, -0.500000000000000000000000000000, ])),
    (26 , (0, [0.679857730865478515625000000000, 0.499999880790710449218750000000, -0.499204099178314208984375000000, -0.409090906381607055664062500000, 0.500000000000000000000000000000, ],
[-0.129289120435714721679687500000, 0.111408457159996032714843750000, -0.499999880790710449218750000000, -0.500000000000000000000000000000, -0.500000000000000000000000000000, ])),
    (7 , (4, [0.679857730865478515625000000000, 0.499999880790710449218750000000, 0.499999880790710449218750000000, 0.500000000000000000000000000000, 0.500000000000000000000000000000, ],
[-0.328422904014587402343750000000, -0.499999880790710449218750000000, -0.499999880790710449218750000000, -0.500000000000000000000000000000, -0.500000000000000000000000000000, ])),
    (8 , (1, [0.679857730865478515625000000000, -0.374999910593032836914062500000, 0.015915494412183761596679687500, 0.500000000000000000000000000000, 0.500000000000000000000000000000, ],
[-0.328422904014587402343750000000, -0.499999880790710449218750000000, -0.015915494412183761596679687500, -0.045454546809196472167968750000, 0.000000000000000000000000000000, ])),
    (9 , (3, [-0.212261527776718139648437500000, -0.022281691431999206542968750000, -0.498408347368240356445312500000, -0.454545468091964721679687500000, -0.375000000000000000000000000000, ],
[-0.295233935117721557617187500000, -0.063661977648735046386718750000, -0.499999880790710449218750000000, -0.500000000000000000000000000000, -0.500000000000000000000000000000, ])),
    (10 , (0, [0.679857730865478515625000000000, 0.499999880790710449218750000000, -0.498408347368240356445312500000, 0.500000000000000000000000000000, 0.500000000000000000000000000000, ],
[0.268978416919708251953125000000, 0.111408457159996032714843750000, -0.499999880790710449218750000000, 0.227272734045982360839843750000, 0.000000000000000000000000000000, ])),
    (11 , (4, [-0.321785092353820800781250000000, 0.063661977648735046386718750000, -0.499204218387603759765625000000, -0.227272734045982360839843750000, -0.166666671633720397949218750000, ],
[-0.324274271726608276367187500000, 0.031830988824367523193359375000, -0.499999970197677612304687500000, -0.500000000000000000000000000000, -0.500000000000000000000000000000, ])),
    (12 , (0, [0.679857730865478515625000000000, 0.499999880790710449218750000000, 0.499999880790710449218750000000, 0.500000000000000000000000000000, -0.449999988079071044921875000000, ],
[0.600000023841857910156250000000, -0.499999880790710449218750000000, -0.499999880790710449218750000000, 0.449999988079071044921875000000, -0.500000000000000000000000000000, ])),
    (13 , (0, [0.679857730865478515625000000000, 0.499999880790710449218750000000, 0.499999880790710449218750000000, -0.263636350631713867187500000000, -0.200000002980232238769531250000, ],
[0.667245924472808837890625000000, -0.499999880790710449218750000000, -0.499999880790710449218750000000, -0.500000000000000000000000000000, -0.500000000000000000000000000000, ])),
    (14 , (4, [-0.321785092353820800781250000000, 0.063661977648735046386718750000, -0.499204218387603759765625000000, -0.227272734045982360839843750000, -0.166666671633720397949218750000, ],
[-0.324274271726608276367187500000, 0.031830988824367523193359375000, -0.499999970197677612304687500000, -0.500000000000000000000000000000, -0.500000000000000000000000000000, ])),
    (15 , (3, [-0.321785092353820800781250000000, -0.031830988824367523193359375000, -0.499204218387603759765625000000, -0.227272734045982360839843750000, -0.166666671633720397949218750000, ],
[-0.324274271726608276367187500000, -0.063661977648735046386718750000, -0.499999970197677612304687500000, -0.500000000000000000000000000000, -0.500000000000000000000000000000, ])),
])

def findBestSplit(prop, inputBounds, target, nnet1, nnet2, steps):
    # for each input interval
    ubs, lbs = inputBounds
    bestEps = 10000000.0
    bestInput = -1
    bestMid = 0
    for i in range(len(lbs)):
        lb, ub = lbs[i], ubs[i]
        width = ub - lb
        for j in range(1, steps):
            mid = lb + (width*(j/steps))
            result = subprocess.run(["./splittest", str(prop), nnet1, nnet2, str(i), str(mid)], stderr=subprocess.PIPE)
            out = result.stderr.decode("utf-8")
            lines = out.strip().split("\n")

            index = lines.index("split 1:")
            split1 = lines[index + 1: index + 3]
            split1LB, split1UB = [eval(split1[0].replace(" ", ",")), eval(split1[1].replace(" ", ","))]
            eps1 = max(abs(split1UB[target]), abs(split1LB[target]))

            index = lines.index("split 2:")
            split2 = lines[index + 1: index + 3]
            split2LB, split2UB = [eval(split2[0].replace(" ", ",")), eval(split2[1].replace(" ", ","))]
            eps2 = max(abs(split2UB[target]), abs(split2LB[target]))

            eps = max(eps1, eps2)

            if eps < bestEps:
                bestEps = eps
                bestInput = i
                bestMid = mid

    return bestEps, bestInput, bestMid


def main():
    nnet1 = "nnet/ACASXU_run2a_1_1_batch_2000.nnet"
    nnet2 = "compressed_nnets/ACASXU_run2a_1_1_batch_2000_16bit.nnet"

    best = findBestSplit(1, ACASProps[1][1:], ACASProps[1][0], nnet1, nnet2, 100)

    print(best)

if __name__ == "__main__":
    main()